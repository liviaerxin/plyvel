name: plyvel build

on: [push, pull_request]

jobs:
  sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v2
    
    - name: Install Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U setuptools
        pip install -r requirements-dev.txt

    - name: Build sdist
      run: python setup.py sdist
    
    - name: Save sdist
      uses: actions/upload-artifact@v2
      with:
        path: dist/*.tar.gz
        
  wheel:
    name: Build ${{ matrix.os }}-${{ matrix.cibw.arch }} wheel
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # - os: macos-latest
          #   name: mac-intel
          #   cibw:
          #     arch: x86_64
          #     build: "cp37* cp38* cp39*"

          # - os: macos-latest
          #   name: mac-arm
          #   cibw:
          #     arch: universal2
          #     build: "cp39*"

          # - os: ubuntu-latest
          #   name: manylinux
          #   cibw:
          #     arch: "auto aarch64"
          #     build: "cp37* cp38* cp39*"
          
          # - os: windows-2019
          #   name: win32
          #   architecture: x86
          #   cibw:
          #     build: "cp*win32"
          
          # On 10/23/2019, GitHub Actions default shell on Windows runners is changing to PowerShell
          - os: windows-2019
            name: win_amd64
            cibw:
              arch: x64
              build: "cp37*win_amd64" #cp38*win_amd64 cp39*win_amd64"
    env:
      VCPKG_INCLUDE_PATH: "C:/vcpkg/installed/${{ matrix.cibw.arch }}-windows/include"
      VCPKG_LIB_PATH: "C:/vcpkg/installed/${{ matrix.cibw.arch }}-windows/lib"
      VCPKG_DLL_PATH: "C:/vcpkg/installed/${{ matrix.cibw.arch }}-windows/bin"
      CIBW_BUILD: "${{ matrix.cibw.build || '*' }}"
      CIBW_ENVIRONMENT_MACOS: >
        C_INCLUDE_PATH="/usr/local/include:$C_INCLUDE_PATH"
        CPLUS_INCLUDE_PATH="/usr/local/include:$CPLUS_INCLUDE_PATH"
        LIBRARY_PATH="/usr/local/lib:$LIBRARY_PATH"
      # [Path and environment variables for command-line builds](https://docs.microsoft.com/en-us/cpp/build/building-on-the-command-line?view=msvc-160)
      CIBW_ENVIRONMENT_WINDOWS: >
        INCLUDE="$INCLUDE;$VCPKG_INCLUDE_PATH"
        LIB="$LIB;$VCPKG_LIB_PATH"
      CIBW_ARCHS_LINUX: "${{ matrix.cibw.arch || 'auto' }}"
      CIBW_ARCHS_MACOS: "${{ matrix.cibw.arch || 'auto' }}"
      CIBW_BEFORE_ALL_LINUX: "gcc -v && bash scripts/install-snappy.sh && bash scripts/install-leveldb.sh"
      CIBW_BEFORE_ALL_MACOS: "clang -v && bash scripts/install-snappy.sh && bash scripts/install-leveldb.sh"      
      CIBW_BEFORE_ALL_WINDOWS: "vcpkg install leveldb:x64-windows" # cibuildwheel still use `CMD` instead of `PowerShell`, test by using "(dir 2>&1 *`|echo CMD);&<# rem #>echo PowerShell"
      CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair --lib-sdir . -w {dest_dir} {wheel}"
      CIBW_REPAIR_WHEEL_COMMAND_MACOS: "delocate-listdeps {wheel} && delocate-wheel -w {dest_dir} {wheel} -v"
      CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "echo $(python --version) && echo $(VCPKG_DLL_PATH) && delvewheel repair --add-path C:/vcpkg/installed/${{ matrix.cibw.arch }}-windows/bin -w {dest_dir} {wheel} -v"
      # Install delvewheel on windows, because cibuildwheel doesn't yet ship a default repair command for Windows.
      CIBW_BEFORE_BUILD_WINDOWS: "pip install delvewheel"

      # Build using the manylinux2014 image instead of manylinux2010
      # CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
      # CIBW_MANYLINUX_I686_IMAGE: manylinux2014
      # CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.8"
    
    - name: Set up QEMU
      if: runner.os == 'Linux'
      uses: docker/setup-qemu-action@v1
      with:
        platforms: all

    - name: Install cibuildwheel
      run: |
        pip install -U setuptools pip wheel
        pip install -U cibuildwheel

    - name: Build
      run: |
        python -m cibuildwheel --output-dir wheelhouse

    - uses: actions/upload-artifact@v2
      with:
          path: ./wheelhouse/*.whl